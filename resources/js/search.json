[[{"l":"Getting started","p":["Welcome to the Netlify Skew Protection package documentation, a library designed to seamlessly implement Skew Protection on your Netlify site. This guide will show you how the package works to prevent version skew issues in your application and walk you through the steps to get it set up."]},{"l":"Problem","p":["When deploying a new version of a static frontend application, users who are still browsing the previous version may encounter 404 errors for static assets like JavaScript or CSS files. This happens because the new deployment instantly replaces the old one, but users' files still reference asset filenames that were unique to the previous deployment. As a result, when a user navigates to a page during this transition, the browser requests files may no longer exist, leading to broken pages and degraded user experience. At Workleap, version skew most commonly occurs with lazy-loaded routes."]},{"l":"Solution","p":["Skew Protection addresses this by maintaining a consistent experience for each user session. It does so by assigning a cookie when a user first fetch the entry point, tying that session to a specific deployment id. All subsequent asset requests are routed to that specific deploy URL (e.g., https://deploy-id--your-site.netlify.app), ensuring that users always receive the correct asset versions associated with the deployment they were served initially. This prevents asset mismatches and eliminates 404 errors caused by mid-session deploy transitions, resulting in smoother, safer releases."]},{"l":"Set up Skew Protection","p":["To enable Skew Protection on your Netlify site, you'll need to follow four key steps:","Create the Edge Function","Register the Edge Function","Build the Edge Function","Provide a secret"]},{"l":"Create the Edge Function","p":["Netlify's mechanism for intercepting and rerouting CDN requests is called Edge Functions. They act as middleware between incoming requests and your site's static files.","First, open a terminal at the root of the project where you'll define the Edge Function. Then install the following package:","Next, create a netlify folder at the root of the project and add a file named skew-protection.ts:","Finally, open the skew-protection.ts file and paste in the contents for either SPA mode or entrypoints , depending on the context of your application."]},{"l":"SPA mode","p":["Use this mode if your application is a standard Single Page Application, where all paths are typically served from a single index.html file."]},{"l":"Entrypoints mode","p":["This mode is useful for federated applications with multiple remotes or applications that use a manifest file as the entry point.","In the case of a federated setup, the entry points should typically correspond to the remote modules' entry files.","The example above assumes that the application's entry point is index.html. If your app uses a different entry point, be sure to replace / with the correct path."]},{"l":"Register the Edge Function","p":["Now, let's register the Edge Function with Netlify. If the project doesn't already include a netlify.toml file, create one at the root of the project:","Then, open the netlify.toml file and add/replace the following configuration to register the Edge Function:"]},{"l":"Build the Edge Function","p":["If your application is deployed using a combination of an Azure DevOps pipeline or a GitHub Action along with the Netlify CLI, you're all set, no additional steps are required to build the Edge Function.","However, if your application is built and deployed using Netlify Continuous Deployment, an existing limitation in Netlify's Edge Function support for imported NPM packages requires additional steps. In this case, you'll need to explicitly build the Edge Function using Rslib."]},{"l":"Rslib","p":["First, open a terminal at the root of the project and install the following dependency:","Then, create a file named rslib.edge-functions.ts at the root of the project:","Then, open the rslib.edge-functions.ts file and paste the following content:","If the build of the application is output in the same dist path as the edge function, make sure to output the application files in a subfolder like dist/app rather than the root of the dist folder.","Then, update the netlify.toml to point to the new Edge Function build output:","Finally, update the project's package.json file to build both, the application and the Edge Function:"]},{"l":"esm.sh alternative","p":["Using esm.sh to import the package is a more straightforward approach, but it introduces an additional third-party dependency. To load the @workleap/netlify-skew-protection package via esm.sh, you can use the following import directly in your Edge Function:","Since the package is fetched from a third-party CDN instead of being installed locally via node_modules, you can safely remove @workleap/netlify-skew-protection from the package.json file.","The example above always pulls the latest version of the package. For more predictable behavior, esm.sh also supports importing a specific version, which is a safer and recommended option for production use."]},{"l":"Provide a secret","p":["To secure the HMAC signature used by the Skew Protection mechanism, you'll need to generate a new secret. Use the OpenSSL CLI to create a strong, random value.","Open a Bash terminal (or any terminal compatible with OpenSSL) and run the following command:","Copy the generated value, then navigate to your project's Netlify site settings. Add a new environment variable named SKEW_PROTECTION_SECRET with the generated secret as its value:","Variable","Value","SKEW_PROTECTION_SECRET","The generated secret."]},{"i":"try-it-rocket","l":"Try it \uD83D\uDE80","p":["To verify that Skew Protection is working as expected, follow these steps:","Open a browser with the Dev Tools open, and go to the Network tab.","Locate the request for the application's entry point file and inspect the response headers.","You should see a nf_sp cookie (or the custom name you configured for the Skew Protection cookie) in the response:","Response headers cookie example","Refresh the page, and inspect the request headers of a JS and CSS assets. The request should include the same nf_sp cookie, confirming that the session is pinned to the original deploy:","Request headers cookie example"]},{"l":"Troubleshoot issues","p":["If the Skew Protection cookie is not being set, use the Edge Functions logs in Netlify to investigate the issue.","If the logs indicate that the Edge Function isn't installed correctly, it's likely because the SKEW_PROTECTION_SECRET environment variable is missing from the Netlify site's configuration.","If requests to previous deploy assets aren't being re-routed as expected, enable the verbose option, redeploy the Edge Function, and inspect the Edge Functions logs for details."]}],[{"l":"Available options"},{"l":"secretEnvironmentVariableName","p":["Specifies the name of the environment variable that holds the secret used for signing the cookie with HMAC encryption to prevent tampering. To override the default value, use the secretEnvironmentVariableName option:"]},{"l":"cookieName","p":["Defines the name of the cookie that stores the deploy ID associated with the user's session. To change the cookie name, use the cookieName option:"]},{"l":"cookiePath","p":["Specifies the cookie path for the deployment ID cookie associated with the user session. To change the cookie path, use the cookiePath option:"]},{"l":"cookieMaxAgeInMs","p":["Sets the maximum age (in milliseconds) of the cookie holding the deployment ID. To customize the expiration, use the cookieMaxAgeInMs option:"]},{"l":"verbose","p":["Enables additional logging in the Edge Functions logs to assist with troubleshooting. To enable verbose logging, set the verbose option to true:"]}],[{"l":"About","p":["To ask a question or propose an idea, feel free to start a new discussion on Github. If you found a bug, please open an issue on Github."]},{"l":"Contributing","p":["Have a look at the contributor's documentation."]},{"l":"License","p":["See the LICENSE on Github."]}]]